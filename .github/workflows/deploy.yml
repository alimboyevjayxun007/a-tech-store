# .github/workflows/deploy.yml
name: NestJS CI/CD

on:
  push:
    branches:
      - main # main branchga kod push qilinganda ishga tushadi

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/nestjs-app # Docker Hubdagi image nomi
  DOCKER_IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Ish oqimi qaysi operatsion tizimda bajariladi

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm' # Agar npm ishlatayotgan bo'lsangiz. Agar yarn bo'lsa: 'yarn'

      - name: üì¶ Install dependencies
        run: npm ci # Agar npm ishlatayotgan bo'lsangiz. Agar yarn bo'lsa: yarn install --frozen-lockfile

      - name: üèóÔ∏è Build NestJS application
        run: npm run build # Agar npm ishlatayotgan bo'lsangiz. Agar yarn bo'lsa: yarn build

      - name: üê≥ Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: üî® Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          # build-args bu yerda endi ishlatilmaydi, chunki secrets runtime vaqtida beriladi

      - name: üöÄ Deploy to server
        uses: appleboy/ssh-action@v1.0.3 # SSH orqali serverga ulanish uchun action
        with:
          host: ${{ secrets.SSH_HOST }} # Server IPsi yoki domeni
          username: ${{ secrets.SSH_USER }} # Server user nomi
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH private kaliti
          script: |
            # Serverdagi ilova papkasiga o'tish
            # APP_DIR sizning GitHub Secrets'da belgilangan katalog yo'li bo'lishi kerak (masalan, /var/www/a-tech-store)
            cd ${{ secrets.APP_DIR }}

            # Agar loyiha kodi serverda mavjud bo'lmasa, uni klonlash
            # Agar mavjud bo'lsa, yangilash
            if [ ! -d ".git" ]; then
              echo "Repositoryni klonlash..."
              git clone https://github.com/${{ github.repository }}.git .
            else
              echo "Eng so'nggi o'zgarishlarni tortish..."
              git pull origin main
            fi

            # Docker Hubdan eng so'nggi image'ni tortish
            echo "Docker Hubdan eng so'nggi image'ni tortish..."
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

            # Docker Compose orqali konteynerlarni ishga tushirish
            # --force-recreate: Konteynerlarni qayta yaratadi
            # --remove-orphans: Eski, ishlatilmaydigan servislarni o'chiradi
            echo "Docker Compose servislarini ishga tushirish..."
            docker-compose -f docker-compose.yml up -d --force-recreate --remove-orphans

            echo "Joylashtirish yakunlandi!"